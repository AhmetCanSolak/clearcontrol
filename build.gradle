buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.bintray"


sourceSets {
    main
    {
        java
        { srcDir 'src' }
        resources
        { srcDir 'src' }
    }
    test
    {
        java
        { srcDir 'src' }
        resources
        { srcDir 'src' }
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
    ->
    try
    {
	    def stdout = new ByteArrayOutputStream()
	    exec {
	        commandLine 'git', 'describe', '--tags'
	        standardOutput = stdout
	    }
	    return stdout.toString().trim()
    }
    catch(Throwable e)
    {
    	println e
    }
}


sourceCompatibility = 1.8

group = 'net.clearcontrol'
version = getVersionName()

/*
compileJava 
{
    options.compilerArgs << '-XDignore.symbol.file'
    options.fork = true // may not needed on 1.8
    options.forkOptions.executable = 'javac' // may not needed on 1.8
}/**/

test 
{
    testLogging.showStandardStreams = true 
    testLogging 
    {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'

    maxHeapSize = "16G"
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies 
{
    // JUnit:
    compile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // Commons:
    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-math3:3.5'
    compile 'org.apache.logging.log4j:log4j-api:2.1'
    compile 'org.apache.logging.log4j:log4j-core:2.1'

    // Guava:
    compile 'com.google.guava:guava:18.0'

    // Trove:
    compile 'net.sf.trove4j:trove4j:3.0.3'

    // Jakson for JSON:
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.1'

    // JScience:
    compile 'org.jscience:jscience:4.3.1'

    // Matrix libs:
    compile group: 'de.mukis', name: 'de.mukis.jama', version: '2.0.0.M1'
    compile 'com.googlecode.efficient-java-matrix-library:ejml:0.+'

    // JTransforms:
    compile fileTree(dir: '../Libs/jtransforms', include: '*.jar')

    // VecMath:
    compile 'java3d:vecmath:1.3.1'

    // openHFT
    compile 'net.openhft:compiler:2.1'
    compile 'net.openhft:lang:6.3.5'
    compile 'net.openhft:affinity:2.0.6'
    compile 'net.openhft:collections:3.0.2' 
    compile 'net.openhft:chronicle:3.0.1'
    
    // Scripting (groovy, jpython...):
    compile 'org.python:jython:2.7-rc2'
    compile 'com.fifesoft:rsyntaxtextarea:2.5.6'
    compile 'org.reflections:reflections:0.9.10'
    compile 'org.codehaus.groovy:groovy-all:2.4.3:indy'
    
    // Mail:
    compile 'javax.mail:mail:1.4.7'

    
    // Look and feels:
    compile 'com.seaglasslookandfeel:seaglasslookandfeel:0.1.7.3'
    compile 'com.jgoodies:looks:2.2.2'
    compile 'org.devzendo:Quaqua:7.3.4'

    // JavaFX:
    compile 'eu.hansolo.enzo:Enzo:0.3.6'
    /*compile 'org.jfxtras:jfxtras-common:8.0-r5'
    compile 'org.jfxtras:jfxtras-controls:8.0-r5'
    compile 'org.jfxtras:jfxtras-window:8.0-r5'
    compile 'org.jfxtras:jfxtras-gauge-linear:8.0-r5'
    compile 'org.jfxtras:jfxtras-labs:8.0-r5'/**/
    compile 'org.controlsfx:controlsfx:8.40.11'
    
    compile 'de.jensd:fontawesomefx:8.9'
   	//compile 'de.jensd:fontawesomefx-fontawesome:4.6.3'
    //compile 'de.jensd:fontawesomefx-materialdesignfont:1.6.50'
    //compile 'de.jensd:fontawesomefx-materialicons:2.2.0'
    //compile 'de.jensd:fontawesomefx-octicons:4.3.0'
    //compile 'de.jensd:fontawesomefx-icons525:2.6.0'
    //compile 'de.jensd:fontawesomefx-weathericons:2.0-3'
 
    // MigLayout:
    compile 'com.miglayout:miglayout:3.7.4'

    // JMathPlot:
    compile 'com.github.yannrichet:JMathPlot:1.0.1'

    // JTransforms:
    compile fileTree(dir: './libs/jtransforms', include: '*.jar')

    // imglib2:
    compile ('net.imglib2:imglib2:2.2.0'){transitive = true}
    compile ('net.imglib2:imglib2-ui:2.0.0-beta-28'){transitive = true}
    compile ('net.imglib2:imglib2-ij:2.0.0-beta-30'){transitive = true}
    compile ('net.imglib2:imglib2-algorithm:0.2.1'){transitive = true}
    
    // scifio:
    compile ('io.scif:pom-scifio:5.8.0'){transitive = true}
    compile ('io.scif:scifio:0.21.0'){transitive = true}

    // Bridj and co:
    compile 'com.nativelibs4java:bridj:0.7.0'
    compile 'com.nativelibs4java:javacl:1.0.0-RC4'

    // JSSC (serial):
    compile ('org.scream3r:jssc:2.8.0'){transitive= true; changing= true}
   
    // Halcyon:
    compile ('net.halcyon:Halcyon:[0.3.1,1.0.0]'){changing= true; transitive= true}

    // Sqeazy:
    compile ('net.sqeazy:sqeazy:0.2.1') {transitive= true; changing= true}

    // CoreMem:
    compile ('net.coremem:CoreMem:[0.3.3,)'){transitive= true; changing= true}

    // ClearVolume:
    compile ('net.clearvolume:clearvolume:[1.3.22,)')  {transitive= true; changing= true}
    compile ('net.clearvolume:cleargl:[2.0.0,)') {transitive= true; changing= true}
    compile ('net.clearvolume:clearcl:[3.23,)')      {transitive= true; changing= true}
    compile ('net.clearvolume:clearaudio:1.0.2')   {transitive= true; changing= true}

    // AO:
    compile ('net.rtlib:Mirao52J:(,2.0.0]'){transitive=true; changing= true}
    compile ('net.rtlib:ASDKJ:(,2.0.0]')  {transitive=true; changing= true}

    // Cameras:
    compile ('net.rtlib:DcamJ:(,1.5]')                   {transitive= true; changing= true}
    compile ('net.clearcontrol:AndorSDKJ:[0.1.0,1.0.0]'){transitive= true; changing= true}
    compile 'com.github.sarxos:webcam-capture:0.3.9'
 
    // Stages:
    compile ('net.rtlib:ECC100J:1.0') {changing= true; transitive= true}

    // Symphony:
    compile ('net.rtlib:NIRIOJ:(,1.1]') {changing= true; transitive= true}

    // Other:
    //compile 'com.github.rwl:jtransforms:2.4.0'
    //compile 'org.lwjgl.lwjgl:lwjgl:2.9.1'

}


repositories 
{
    // main repos:
    mavenCentral()
    maven { url "http://oss.sonatype.org/content/groups/public"} 
    maven { url "http://mvnrepository.com/artifact" }

    // ClearControl:
    maven { url  "http://dl.bintray.com/clearcontrol/ClearControl"  }

    // ClearVolume: 
    maven { url "http://dl.bintray.com/clearvolume/ClearVolume" }

    //imglib2:
    maven { url  "http://maven.imagej.net/content/repositories/releases" }
    maven { url  "http://maven.imagej.net/content/repositories/snapshots" }
    maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/" }
    
    //jfxtras:
    maven { url "https://mvnrepository.com/artifact/org.jfxtras/jfxtras-labs" }
    
    //FontAwesome:
    maven { url "https://bintray.com/jerady/maven/FontAwesomeFX/view"}
    
    //Sqeazy:
    maven {url  "http://dl.bintray.com/psteinb/maven" }

}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }


//***********************************************************************************

// PUBLISHING




artifacts
{
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
        }
    }
}

apply from: 'bintrayUpload.gradle'










